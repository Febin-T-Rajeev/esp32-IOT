#include <WiFi.h>                                                                                                                    //Author : Febin T Rajeev
#include <ThingESP.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#ifdef __cplusplus
extern "C" {
#endif
uint8_t temprature_sens_read();
#ifdef __cplusplus
}
#endif

uint8_t temprature_sens_read();

int a = ((temprature_sens_read() - 32) / 1.8);
String tem = String(a, DEC);
String cell = "°C";
String result = tem + cell;
int b = 4+4;
String l=String(b, DEC);;

ThingESP32 thing("febin", "esp32whatsapp", "123456789");

int LED = 2;

unsigned long previousMillis = 0;
const long INTERVAL = 6000;

Adafruit_SSD1306 display(-1);

const unsigned char sb [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xf3, 0xcf, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xe0, 0x0f, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf0, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x80, 0x03, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xc0, 0x01, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x00, 0x78, 0x7f, 0xe0, 0x7f, 0xcf, 0xfc, 0x00, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x01, 0xe1, 0xf8, 0x00, 0x01, 0xff, 0xef, 0x80, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x07, 0x87, 0xf0, 0x00, 0x00, 0xff, 0xe1, 0xe0, 0x00, 0x07, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x1e, 0x0f, 0xf0, 0x00, 0x00, 0x7f, 0xe0, 0x78, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x07, 0x1f, 0xff, 0xc1, 0xfe, 0x00, 0x03, 0xe0, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0x80, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0x80, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x9e, 0x00, 0x00, 0x01, 0xff, 0xff, 
	0xff, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x07, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xff, 0xff, 0xfc, 0x00, 0x3f, 0xe0, 0xff, 0xf8, 0x00, 0x1f, 0x07, 0xfc, 0x00, 0x1f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0x00, 0x7f, 0xfd, 0x3f, 0xff, 0xff, 0xfc, 0xbf, 0xfe, 0x00, 0x7f, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xcf, 0xff, 0xff, 0xf3, 0xff, 0xfe, 0x03, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xe3, 0xc0, 0x07, 0xcf, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xf8, 0xf0, 0x1f, 0x3f, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x3c, 0x7c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void setup()
{
    Serial.begin(115200);

    pinMode(LED, OUTPUT);

    thing.SetWiFi("nemesis", "87654321");

    thing.initDevice(); 
    
display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  
display.clearDisplay();
    
    
}


String HandleResponse(String query)
{

    if (query == "led on")
    {
        digitalWrite(LED, 1);
        return "Done: LED Turned ON";

	      
    }

    else if (query == "led off")
    {
        digitalWrite(LED, 0);
        return "Done: LED Turned OFF";
    }
     
    else if (query == "owner")
    {
        return "FEBIN T RAJEEV";
        
    }
    else if (query == "morse code")
    {
        return "A : ._\nB : _...\nC : _._.\nD : _..\nE : .";
        
    }
     else if (query == "good morning")
    {
        return "good morning";
        
    }
    else if (query == "1")
    {      
  display.clearDisplay();
  display.setTextSize(1);
	display.setTextColor(WHITE);
	display.setCursor(0,0);
	display.println("HELLO");
	display.display(); 
  return "DONE"; 
        
    }
    else if (query == "2")
    {
  display.clearDisplay();
  display.setTextSize(1);
	display.setTextColor(WHITE);
	display.setCursor(0,0);
	display.println("HOW ARE YOU");
	display.display();  
  return "DONE";
        
    }
    
    
    else if (query == "symbols")
    {
     
        return "♕ ➼ ★ ☆ ✡ ✦ ✧ ✩ ✪ ✫ ✬ ✭ ✮ ✯ ✰ ⁂ ⁎ ⁑ ✢ ✣ ✤ ✥ ✱ ✲ ✳ ✴ ✵ ✶ ✷ ✸ ✹ ✺ ✻ ✼ ✽ ✾ ✿ ❀ ❁ ❂ ❃ ❇ ❈ ❉ ❊ ❋ ❄ ❆ ❅ ⋆ ≛ ᕯ ✲ ࿏ ꙰ ۞";
        
    }else if (query == "pi")
    {
     
        return "3.14";
        
    }
else if (query == "superman")
    {
  display.clearDisplay();
	display.drawBitmap(0, 0,  sb, 128, 64, BLACK,WHITE);
	display.display();
        return "DONE";
        
    }    
else if (query == "youtube")
    {
     
        return "https://www.youtube.com/";
        
    }   
       
    else if (query == "4 4")
    {
     
        return l;
        
    }
    
    else if (query == "help")
    { 
        return"__COMMANDS__\n● led on\n● led off\n● led status\n● blink\n● random\n● symbols\n● temp\n● owner\n● pi\n● youtube\n● morse code";
    }
   else if (query == "blink")
  {
 digitalWrite(LED, HIGH);  // turn the LED on (HIGH is the voltage level)
  delay(1000);                      // wait for a second
  digitalWrite(LED, LOW);   // turn the LED off by making the voltage LOW
  delay(1000);     
  digitalWrite(LED, HIGH);  // turn the LED on (HIGH is the voltage level)
  delay(1000);                      // wait for a second
  digitalWrite(LED, LOW);   // turn the LED off by making the voltage LOW
  delay(1000);                  // wait for a second
}

    else if (query == "temp")
    {
         return result;
        
    } 
    else if (query == "random")
    {
      int b = random(10000000,99999999);
    
         
       String r = String(b,DEC);
       return "random number : "+r;
    }  
    
    
    else if (query == "led status")
        return digitalRead(LED) ? "LED is ON" : "LED is OFF";

    else
        return "Your query was invalid..";
}

void loop()
{

    // if (millis() - previousMillis >= INTERVAL)
    // {
    //     previousMillis = millis();
    //     String msg = digitalRead(LED) ? "LED is ON" : "LED is OFF";
    //     thing.sendMsg("PHONE_NUMBER", msg);
    // }

    thing.Handle();
}
